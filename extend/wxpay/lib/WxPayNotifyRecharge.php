<?phpini_set('date.timezone', 'Asia/Shanghai');error_reporting(E_ERROR);require_once "WxPay.Api.php";require_once 'WxPay.Notify.php';use app\common\model\User;use app\common\model\UserRecharge;use app\common\model\UserLinesRecord;class WxPayNotifyRecharge extends WxPayNotify{    //查询订单    public function Queryorder($transaction_id)    {        $input = new WxPayOrderQuery();        $input->SetTransaction_id($transaction_id);        $result = WxPayApi::orderQuery($input);        if (array_key_exists("return_code", $result)            && array_key_exists("result_code", $result)            && $result["return_code"] == "SUCCESS"            && $result["result_code"] == "SUCCESS") {            // todo 更改充值记录状态为已支付            $time = time();            $UserRecharge = new UserRecharge();            $UserRechargeInfo = $UserRecharge->where([                'user_recharge_id' => $result['attach'],                'is_pay' => 1,            ])->limit(1)->find();            if (!$UserRechargeInfo) {                return false;            }            $UserRechargeInfo->is_pay = 2;            $UserRechargeInfo->pay_time = $time;            $UserRechargeRes = $UserRechargeInfo->save();            //todo 增加用户竞拍额度            if ($UserRechargeRes) {                User::where(['user_id' => $UserRechargeInfo['user_id']])->setInc('user_lines', $UserRechargeInfo['lines']);            }            //todo 记录竞拍额度资金明细记录            UserLinesRecord::create([                'user_id' => $UserRechargeInfo['user_id'],                'type' => 1,                'money' => $UserRechargeInfo['lines'],                'record_add_time' => $time,//                `user_id` int(10) NOT NULL,//                  `offer_id` int(10) NOT NULL,//                  `product_id` int(10) NOT NULL,//                  `type` tinyint(1) NOT NULL COMMENT '1：充值；2：消费；3：竞拍结束退会',//                  `money` decimal(10,2) NOT NULL,//                  `record_add_time` int(10) NOT NULL,//                  PRIMARY KEY (`lines_record_id`)            ]);            return true;        }        return false;    }    //重写回调处理函数    public function NotifyProcess($data, &$msg)    {        $notfiyOutput = array();        if (!array_key_exists("transaction_id", $data)) {            $msg = "输入参数不正确";            return false;        }        //查询订单，判断订单真实性        if (!$this->Queryorder($data["transaction_id"])) {            $msg = "订单查询失败";            return false;        }        return true;    }}