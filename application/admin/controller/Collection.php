<?phpnamespace app\admin\controller;use app\common\model\Collection as CollectionModel;use think\Config;use think\Image;use app\common\model\Category;class Collection extends Auth{    /**     * 首页列表     */    public function index()    {        $config = Config::get('admin');        $where = $search = [];        if (input('param.id')) {            $where['collection_id'] = input('param.id');            $search['collection_id'] = input('param.id');        }        if (input('param.collection_name')) {            $where['collection_name'] = ['like', '%' . input('param.collection_name') . '%'];            $search['collection_name'] = input('param.collection_name');        }        if (input('param.collection_introduce')) {            $where['collection_introduce'] = ['like', '%' . input('param.collection_introduce') . '%'];            $search['collection_introduce'] = input('param.collection_introduce');        }        if (input('param.collection_start_time')) {            $where['collection_start_time'] = ['>=', strtotime(input('param.collection_start_time'))];            $search['collection_start_time'] = input('param.collection_start_time');        }        if (input('param.collection_end_time')) {            $where['collection_end_time'] = ['<=', strtotime(input('param.collection_end_time'))];            $search['collection_end_time'] = input('param.collection_end_time');        }//        dump($where);        $data = CollectionModel::where($where)->order('collection_add_time desc')->paginate($config['paginate']);//        halt($data);        foreach ($data as $key => $value) {            $data[$key]['collection_start_time'] = date('Y.m.d', $value['collection_start_time']);            $data[$key]['collection_end_time'] = date('Y.m.d', $value['collection_end_time']);        }        return $this->fetch('', [            'data' => $data,            'search' => $search,        ]);    }    /**     * 添加     */    public function add()    {        if ($this->request->isPost()) {            $param = $this->request->param()['data'];            $collection_start_time = strtotime($param['collection_start_time']);            $collection_end_time = strtotime($param['collection_end_time']);            if ($collection_start_time >= $collection_end_time) {                return json_encode([400, '结束时间必须在开始时间之后！']);            }            $details = $this->request->param()['details'];            $CollectionModel = CollectionModel::create([                'collection_name' => $param['collection_name'],                'collection_cover' => $param['collection_cover'],                'cover_desc' => $param['cover_desc'],                'category_id' => $param['category_id'],                'collection_start_time' => $collection_start_time,                'collection_end_time' => $collection_end_time,                'collection_introduce' => htmlspecialchars_decode($details),                'collection_add_time' => time(),            ]);            return $CollectionModel ? json_encode([200, '添加成功']) : json_encode([400, '添加失败']);        }        $cate=Category::where(['category_fid'=>0])->order(['category_sort'=>'desc'])->select();        return $this->fetch('',['cate'=>$cate]);    }    /**     * 修改     */    public function edit()    {        if ($this->request->isPost()) {            $param = $this->request->param()['data'];            $collection_start_time = strtotime($param['collection_start_time']);            $collection_end_time = strtotime($param['collection_end_time']);            if ($collection_start_time >= $collection_end_time) {                return json_encode([400, '结束时间必须在开始时间之后！']);            }            $details = $this->request->param()['details'];            $CollectionModel = CollectionModel::update([                'collection_id' => $param['collection_id'],                'collection_name' => $param['collection_name'],                'cover_desc' => $param['cover_desc'],                'collection_cover' => $param['collection_cover'],                'category_id' => $param['category_id'],                'collection_start_time' => $collection_start_time,                'collection_end_time' => $collection_end_time,                'collection_introduce' => htmlspecialchars_decode($details),//                'collection_add_time'=>time(),            ]);            return $CollectionModel ? json_encode([200, '操作成功']) : json_encode([400, '操作失败']);        }        $data = CollectionModel::find(input('param.id'))->toArray();        $data['collection_start_time'] = date('Y-m-d', $data['collection_start_time']);        $data['collection_end_time'] = date('Y-m-d', $data['collection_end_time']);//        halt($data);        $cate=Category::where(['category_fid'=>0])->order(['category_sort'=>'desc'])->select();        return $this->fetch('', compact('data','cate'));    }    /**     * 图片上传     */    public function SynUpload()    {        $file = request()->file('file');        if (!$file) {            return $this->fetch();        }        $path = 'uploads/collection';        $info = $file->move($path);        $resImageInfo = $path . '/' . $info->getSaveName();        $image = \think\Image::open($resImageInfo);        $image->thumb(150, 150)->save($resImageInfo);        if ($info) {            return $this->result($resImageInfo, 200, '成功');        } else {            return $this->result($file->getError(), 400, '失败');        }    }    /**     * wangEditor 上传图片     */    public function imageUpload()    {        // 获取表单上传文件        $files = request()->file('file');        $path = 'uploads/collectionImg';        $url = [];        foreach ($files as $file) {            $info = $file->move($path);            $resImageInfo = $path . '/' . $info->getSaveName();            $image = Image::open($resImageInfo);            $image->thumb(750, 1080)->save($resImageInfo);            if ($info) {                $url[] = getHttpHost() . '/' . $resImageInfo;            }        }        $result = [            'errno' => 0,            'data' => $url,        ];        echo json_encode($result);    }    /**     * 删除     */    public function del()    {        $id = input('param.id');        $product_face = CollectionModel::get($id);        $result = CollectionModel::destroy($id);        return $msg = $result ? '删除成功' : '删除失败';    }    /**     * 多选删除     */    public function delall()    {        $id = input('param.id/a');        if (empty($id)) return '请选中后操作！';        $idArr = implode(',', $id);        $result = CollectionModel::destroy($idArr);        return $msg = $result ? json_encode([200, '删除成功']) : json_encode([400, '删除失败']);    }}